from email import message
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from excel import append_values
from datetime import datetime
from aiogram.dispatcher.filters import Text
# from start import TOKEN, bot, dp
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

TOKEN = "6743689178:AAHt0ePvr3SPh3nHWn63eqZJKucoKmiv6BE"

storage = MemoryStorage()

bot = Bot(token = TOKEN)
dp = Dispatcher(bot, storage=storage)

class Form(StatesGroup):
    price = State()
    top = State()
    top_month = State()


xr = []

start_kb = ReplyKeyboardMarkup().add(KeyboardButton("üîù–ü—Ä–∏—Ö–æ–¥üí∞")).add(KeyboardButton("‚ùå–†–∞—Å—Ö–æ–¥üìâ"))#.add(KeyboardButton("üìù–ê–Ω–∞–ª–∏–∑üßÆ"))
earn_kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ê—Ä–µ–Ω–¥–∞", callback_data='button1')).add(InlineKeyboardButton('–ü—Ä–æ–¥–∞–∂–∞', callback_data='button2')).insert(InlineKeyboardButton('–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è', callback_data='button3')).add(InlineKeyboardButton('–ë–∞–Ω–∫', callback_data='button4')).insert(InlineKeyboardButton('–°–ø–æ—Ä—Ç_–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', callback_data='button5'))
spend_kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ê—Ä–µ–Ω–¥–∞", callback_data='button_spend_1')).add(InlineKeyboardButton('–¢–æ–≤–∞—Ä–∫–∞', callback_data='button_spend_2')).insert(InlineKeyboardButton('–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ', callback_data='button_spend_3')).add(InlineKeyboardButton('–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è', callback_data='button_spend_4')).insert(InlineKeyboardButton('–°–ø–æ—Ä—Ç_–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', callback_data='button_spend_5'))

# spend_rent_kb = InlineKeyboardMarkup().add(InlineKeyboardButton("Go Pro", callback_data='spend_rent_1')).add(InlineKeyboardButton('–ü—ã–ª–µ—Å–æ—Å', callback_data='spend_rent_2'))
# @dp.register_message_handler(text = "üîù–ü—Ä–∏—Ö–æ–¥üí∞")
async def start(message: types.Message):
        await bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç", reply_markup=start_kb)

async def top_up(message: types.Message):
        await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=earn_kb)
async def spend(message: types.Message):
        await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=spend_kb)
# async def analysis(message: types.Message):
#         await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É", reply_markup=start_kb)



# –ü—Ä–∏—Ö–æ–¥ –∏–Ω–ª–∞–π–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∫—ç–ª–±—ç–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
# @dp.callback_query_handler(lambda c: c.data == 'button1')
async def topup_callback_button1(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏", reply_markup = InlineKeyboardMarkup()
                            .add(InlineKeyboardButton('–ü—ã–ª–µ—Å–æ—Å', callback_data = 'top_up_vacuumcleaner'))
							.add(InlineKeyboardButton('Go pro', callback_data = 'top_up_gopro'))
                            .add(InlineKeyboardButton('–ú–æ–π—â–∏–∫ –æ–∫–æ–Ω', callback_data = 'top_up_robot')))

async def topup_callback_button2(callback_query: types.CallbackQuery):
    await Form.top.set()
    xr.insert(0, "–¢–æ–≤–∞—Ä")
    await bot.send_message(callback_query.from_user.id, "–ù–∞–¥–µ—é—Å—å —Ç—ã —Å–∫–æ—Ä–æ –¥–æ–π–¥–µ—à—å –¥–æ —Å—é–¥–∞, –±–∞–∫–ª–∞–Ω")

async def topup_callback_button3(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏", reply_markup = InlineKeyboardMarkup()
                            .add(InlineKeyboardButton('–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü', callback_data = 'top_up_hairdresser_last'))
							.add(InlineKeyboardButton('–≠—Ç–æ—Ç –º–µ—Å—è—Ü', callback_data = 'top_up_hairdresser_now')))

async def topup_callback_button4(callback_query: types.CallbackQuery):
    await Form.top_month.set()
    xr.insert(0, "–ë–∞–Ω–∫")
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏ —Å—É–º–º—É –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü")

async def topup_callback_button5(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏", reply_markup = InlineKeyboardMarkup()
                            .add(InlineKeyboardButton('–≠—Ö–æ–ª–æ—Ç', callback_data = 'top_up_eholot')))



async def top_up_vacuumcleaner(callback_query: types.CallbackQuery):
    await Form.top.set()
    xr.insert(0, "–ü—ã–ª–µ—Å–æ—Å")
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏ —Å—É–º–º—É")
async def top_up_gopro(callback_query: types.CallbackQuery):
    await Form.top.set()
    xr.insert(0, "–ì–æ –ø—Ä–æ")
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏ —Å—É–º–º—É")
async def top_up_robot(callback_query: types.CallbackQuery):
    await Form.top.set()
    xr.insert(0, "–†–æ–±–æ—Ç")
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏ —Å—É–º–º—É")
async def top_up_hairdresser_last(callback_query: types.CallbackQuery):
    await Form.top_month.set()
    xr.insert(0, "–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è")
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏ —Å—É–º–º—É")
async def top_up_hairdresser_now(callback_query: types.CallbackQuery):
    await Form.top.set()
    xr.insert(0, "–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è")
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏ —Å—É–º–º—É")
async def top_up_eholot(callback_query: types.CallbackQuery):
    await Form.top.set()
    xr.insert(0, "–≠—Ö–æ–ª–æ—Ç")
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏ —Å—É–º–º—É")



# -----------------------------------------------------
# –¢—Ä–∞—Ç–∞ –∏–Ω–ª–∞–π–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∫—ç–ª–±—ç–∫–∏ –ü–ï–†–í–û–ì–û —É—Ä–æ–≤–Ω—è
async def spend_callback_button1(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–í–ª–æ–∂–µ–Ω–∏—è –≤:", reply_markup = InlineKeyboardMarkup()
                            .add(InlineKeyboardButton('Go pro', callback_data = 'spend_gopro'))
							.add(InlineKeyboardButton('–ü—ã–ª–µ—Å–æ—Å', callback_data = 'spend_vacuum')))
                            # .add(InlineKeyboardButton('–†–æ–±–æ—Ç –º–æ–π—â–∏–∫ –æ–∫–æ–Ω', callback_data = 'spend_robot')))

async def spend_callback_button2(callback_query: types.CallbackQuery):#, state: FSMContext):
    await Form.price.set()
    xr.insert(0, "–¢–æ–≤–∞—Ä")
    await bot.send_message(callback_query.from_user.id, "–†–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ç–æ–≤–∞—Ä–∫—É")

async def spend_callback_button3(callback_query: types.CallbackQuery):
    await Form.price.set()
    xr.insert(0, "–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ")
    await bot.send_message(callback_query.from_user.id, "–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:")

async def spend_callback_button4(callback_query: types.CallbackQuery):
    await Form.price.set()
    xr.insert(0, "–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è")
    await bot.send_message(callback_query.from_user.id, "–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è:")

async def spend_callback_button5(callback_query: types.CallbackQuery):
    await Form.price.set()
    xr.insert(0, "–ê—Ä–µ–Ω–¥–∞ —Å–∏–±–∏—Ä–∫–∞")
    await bot.send_message(callback_query.from_user.id, "–ü–æ—Ç—Ä–∞—Ç–∏–ª –Ω–∞ –∞—Ä–µ–Ω–¥–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Å–∏–±–∏—Ä–∫–∏:")

# –¢—Ä–∞—Ç–∞ –∏–Ω–ª–∞–π–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∫—ç–ª–±—ç–∫–∏ –í–¢–û–†–û–ì–û —É—Ä–æ–≤–Ω—è
async def spend_rent_gopro(callback_query: types.CallbackQuery):
    await Form.price.set()
    xr.insert(0, "–ì–æ –ø—Ä–æ")
    await bot.send_message(callback_query.from_user.id, "–ü–æ—Ç—Ä–∞—Ç–∏–ª –Ω–∞ –≥–æ –ø—Ä–æ —Å–µ–≥–æ–¥–Ω—è:")
async def spend_rent_vacuum(callback_query: types.CallbackQuery):
    await Form.price.set()
    xr.insert(0, "–ü—ã–ª–µ—Å–æ—Å")
    await bot.send_message(callback_query.from_user.id, "–ü–æ—Ç—Ä–∞—Ç–∏–ª –Ω–∞ –ø—ã–ª–µ—Å–æ—Å —Å–µ–≥–æ–¥–Ω—è:")
# async def spend_rent_robot(call: types.CallbackQuery):
#     await Form.price.set()
#     xr.insert(0, "–†–æ–±–æ—Ç")
#     await call.message.answer("–ü–æ—Ç—Ä–∞—Ç–∏–ª –Ω–∞ —Ä–æ–±–æ—Ç–∞ –º–æ–π—â–∏–∫–∞ —Å–µ–≥–æ–¥–Ω—è")
#     await call.answer()


# ___________________________________________
# —Ç—Ä–∞—Ç–∞
async def load_spend(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['price'] = message.text
    current_date = datetime.now().date()
    append_values("B4:D4", current_date, f"{xr[0]}", f"{data['price']}")
    await bot.send_message(message.from_user.id, f"–î–æ–±–∞–≤–ª–µ–Ω—ã —Ç—Ä–∞—Ç—ã –Ω–∞ {xr[0]} –≤ —Ä–∞–∑–º–µ—Ä–µ: {data['price']}")
    await state.finish()

# –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
async def load_up(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['price'] = message.text
    current_date = datetime.now().date()
    append_values("F4:H4", current_date, f"{xr[0]}", f"{data['price']}")
    await bot.send_message(message.from_user.id, f"–î–æ—Ö–æ–¥—ã –æ—Ç {xr[0]} –≤ —Ä–∞–∑–º–µ—Ä–µ: {data['price']} –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    await state.finish()


# –î–æ–¥–µ–ª–∞—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü
async def load_up_last(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['price'] = message.text
    now = datetime.now()
    last_month = now.month-1 if now.month > 1 else 12
    year = now.year - 1 if last_month == 12 else now.year
    # last_year = now.year - 1
    append_values("F4:H4", f"{year}-{last_month}-01", f"{xr[0]}", f"{data['price']}")
    await bot.send_message(message.from_user.id, f"–î–æ—Ö–æ–¥—ã –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—è—Ü –æ—Ç {xr[0]} –≤ —Ä–∞–∑–º–µ—Ä–µ: {data['price']} –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    await state.finish()

# # –û—Ç–º–µ–Ω–∞
# async def cancel(message: types.Message, state: FSMContext):
#     current_state = await state.get_state()
#     if current_state is None:
#         print("—è —Ç—É—Ç")
#         return 
#     await state.finish()
#     await message.reply('Ok')


def register_handlers_client(dp : Dispatcher):
    dp.register_message_handler(start, commands=['start'])
    dp.register_message_handler(top_up, Text(equals = 'üîù–ü—Ä–∏—Ö–æ–¥üí∞'))
    dp.register_message_handler(spend, Text(equals = '‚ùå–†–∞—Å—Ö–æ–¥üìâ'))
    # dp.register_message_handler(analysis, Text(equals ='üìù–ê–Ω–∞–ª–∏–∑üßÆ'))
    # dp.register_message_handler(top_up, commands=['start'])

    dp.register_callback_query_handler(topup_callback_button1, Text(equals = 'button1'))
    dp.register_callback_query_handler(topup_callback_button2, Text(equals = 'button2'))
    dp.register_callback_query_handler(topup_callback_button3, Text(equals = 'button3'))
    dp.register_callback_query_handler(topup_callback_button4, Text(equals = 'button4'))
    dp.register_callback_query_handler(topup_callback_button5, Text(equals = 'button5'))
    dp.register_callback_query_handler(spend_callback_button1, Text(equals = 'button_spend_1'))
    dp.register_callback_query_handler(spend_callback_button2, Text(equals = 'button_spend_2'))#, state = None)
    dp.register_callback_query_handler(spend_callback_button3, Text(equals = 'button_spend_3'))
    dp.register_callback_query_handler(spend_callback_button4, Text(equals = 'button_spend_4'))
    dp.register_callback_query_handler(spend_callback_button5, Text(equals = 'button_spend_5'))
    dp.register_callback_query_handler(top_up_vacuumcleaner, Text(equals = 'top_up_vacuumcleaner'))
    dp.register_callback_query_handler(top_up_gopro, Text(equals = 'top_up_gopro'))
    dp.register_callback_query_handler(top_up_robot, Text(equals = 'top_up_robot'))
    dp.register_callback_query_handler(top_up_hairdresser_last, Text(equals = 'top_up_hairdresser_last'))
    dp.register_callback_query_handler(top_up_hairdresser_now, Text(equals = 'top_up_hairdresser_now'))
    dp.register_callback_query_handler(top_up_eholot, Text(equals = 'top_up_eholot'))
    dp.register_callback_query_handler(spend_rent_gopro, Text(equals = 'spend_gopro'))
    dp.register_callback_query_handler(spend_rent_vacuum, Text(equals = 'spend_vacuum'))
    # dp.register_callback_query_handler(spend_rent_robot, Text(equals = 'spend_robot'))

    # dp.register_callback_query_handler(load_spend, state = Form.info)

    dp.register_message_handler(load_spend, state = Form.price)
    dp.register_message_handler(load_up, state = Form.top)
    dp.register_message_handler(load_up_last, state = Form.top_month)
    # dp.register_message_handler(cancel, state = "*", commands = ['–æ—Ç–º–µ–Ω–∞'])
    # dp.register_message_handler(cancel, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case= True), state = "*")



register_handlers_client(dp)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates = True)